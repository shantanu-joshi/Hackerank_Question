import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'lonelyinteger' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

    public static int lonelyinteger(List<Integer> a) {
        
    // Write your code here
    
    int n  = a.size();
    
    Map<Integer,Integer> mappp = new HashMap<Integer,Integer>();
    
    for(int i=0;i<n;i++)
    {
        int key  = a.get(i);
        if(mappp.containsKey(key))
        {
            int value = mappp.get(key);
            mappp.put(key, value+1);
        }
        else
        {
            mappp.put(key, 1);
        }   
    }
    
    int num  = Integer.MIN_VALUE;

    for(Map.Entry<Integer,Integer> entry : mappp.entrySet())
    {
        if(entry.getValue()==1)
        num  =entry.getKey();
    }
    
    return num;
    
    

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> a = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.lonelyinteger(a);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
